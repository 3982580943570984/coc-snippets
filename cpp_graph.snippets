snippet dxy4 "Description" b
i32 dx[] = { 0, 0, 1, -1 };
i32 dy[] = { -1, 1, 0, 0 };
endsnippet

snippet dxy8 "Description" b
i32 dx[] = { 1, 1, 0, -1, -1, -1, 0, 1 };
i32 dy[] = { 0, 1, 1, 1, 0, -1, -1, -1 };
endsnippet

snippet dsu "" b
struct DSU {
  vector<i32> edges;
  i32 number_of_sets;

  void initialize(i32 n) {
    edges.assign(n, -1);
    number_of_sets = n;
  }

  i32 find(i32 x) { return edges[x] < 0 ? x : edges[x] = find(edges[x]); }

  bool same(i32 a, i32 b) { return find(a) == find(b); }

  i32 size(i32 x) { return -edges[find(x)]; }

  bool unite(i32 a, i32 b) {
    a = find(a), b = find(b);

    if (a == b)
      return false;

    if (edges[a] > edges[b])
      swap(a, b);

    edges[a] += edges[b];
    edges[b] = a;
	--number_of_sets;

    return true;
  }
};
endsnippet

snippet kruskal "mst" b
vector<tuple<i32, i32, i32>> edges;
i32 cost = 0, taken = 0;
void kruskal(i32 amount_of_vertices) {
  sort(edges.begin(), edges.end());

  DSU dsu;
  dsu.initialize(amount_of_vertices);

  for (auto &[w, u, v] : edges) {
    if (dsu.unite(u, v)) {
      cost += w;
      ++taken;

      if (taken == amount_of_vertices - 1)
        break;
    }
  }
}
endsnippet

snippet dfs "depth-first search" b
vector<bool> visited;
void dfs (i32 s) {
  if (visited[s]) return;

  visited[s] = true;
  for (const auto& u : adj[s])
    dfs(u);
}
endsnippet

snippet bfs "breadth-first search" b
std::queue<std::int64_t> q;
void bfs (int x) {
	visited[x] = true;
	q.push(x);
	while (!q.empty()) {
		int s = q.front(); q.pop();
		for (const auto& u : adj[s]) {
			if (visited[u]) continue;
			visited[u] = true;
			q.push(u);
		}
	}
}
endsnippet

snippet dijkstra "single-source shortest paths" b
const int64_t n = 1e5+5;
void dijkstra (int s) {
	for (int i = 1; i <= n; ++i) dist[i] = inf;
	dist[s] = 0;
	pq.push({0, s});
	while (!pq.empty()) {
		int a = pq.top().second; pq.pop();
		if (!vis[a]) {
			vis[a] = true;
			for (const auto& u : adj[a]) {
				int b = u.first;
				int w = u.second;
				if (dist[a] + w < dist[b]) {
					dist[b] = dist[a] + w;
					pq.push({-dist[b], b});
				}
			}
		}
	}
}
endsnippet

snippet dijkstra_restore "single-source shortest paths with path restoration" b
const int64_t n = 1e5+5;
std::vector<std::int64_t> path(n);
void dijkstra (int s) {
	for (int i = 1; i <= n; ++i) dist[i] = inf;
	dist[s] = 0;
	pq.push({0, s});
	while (!pq.empty()) {
		int a = pq.top().second; pq.pop();
		if (!vis[a]) {
			vis[a] = true;
			for (const auto& u : adj[a]) {
				int b = u.first;
				int w = u.second;
				if (dist[a] + w < dist[b]) {
					dist[b] = dist[a] + w;
					path[b] = a;
					pq.push({-dist[b], b});
				}
			}
		}
	}
}

void restore_path (int start, int end) {
	vector<int> restore;
	for (int v = end; v != start; v = path[v])
		restore.push_back(v);
}
endsnippet
