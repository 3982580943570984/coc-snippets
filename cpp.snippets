snippet init "" b
#define _CRT_SECURE_NO_WARNINGS

#include <bits/stdc++.h>

typedef float f32;
typedef double f64;
typedef int32_t i32;
typedef int64_t i64;

using namespace std;

i32 main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  #endif

  return 0;
}
endsnippet

snippet segment "statistic tree" b
/**
 * 1. Indices of leaves starts from n
 * */

/* Array size limit */
constexpr int N = 1e5 + 5;
/* Array size current */
int n;
/* Tree */
int t[2 * N];

struct segment {
  void build() {
    for (size_t i = n - 1; i > 0; --i)
      /* Node value equals to sum of left and right child */
      t[i] = t[i << 1] + t[i << 1 | 1];
  }

  void modify(int p, int v) {
    for (t[p += n] = v; p > 1; p >>= 1)
      /* Node value equals to sum of his childs */
      t[p >> 1] = t[p] + t[p ^ 1];
  }

  /* [l, r) */
  int query(int l, int r) {
    int res = 0;
    for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
      /* If left node not fully included */
      if (l & 1)
        res += t[l++];
      /* If right node fully included */
      if (r & 1)
        res += t[--r];
    }
    return res;
  }
};
endsnippet

snippet fenwick "binary indexed tree" b
struct fenwick{
	std::vector<int> bit;

	fenwick(int n): bit(n+1, 0) {};
	fenwick(std::vector<int> a): fenwick(a.size()) {
		for (size_t i = 0; i < bit.size(); ++i)
			update(i, a[i]);
	};

	int operation (size_t index) {
		int result = 0;
		for(++index; index > 0; index -= index & -index)
			result += bit[index];
		return result;
	};
	void update(size_t index, int delta) {
		for(++index; index < bit.size(); index += index & -index)
			bit[index] += delta;
	};
};
endsnippet 

snippet dfs "depth-first search" b
void dfs (int s) {
  if (visited[s]) return;

  visited[s] = true;
  for (const auto& u : adj[s])
    dfs(u);
}
endsnippet

snippet bfs "breadth-first search" b
std::queue<std::int64_t> q;
void bfs (int x) {
	visited[x] = true;
	q.push(x);
	while (!q.empty()) {
		int s = q.front(); q.pop();
		for (const auto& u : adj[s]) {
			if (visited[u]) continue;
			visited[u] = true;
			q.push(u);
		}
	}
}
endsnippet

snippet dijkstra "single-source shortest paths" b
const int64_t n = 1e5+5;
void dijkstra (int s) {
	for (int i = 1; i <= n; ++i) dist[i] = inf;
	dist[s] = 0;
	pq.push({0, s});
	while (!pq.empty()) {
		int a = pq.top().second; pq.pop();
		if (!vis[a]) {
			vis[a] = true;
			for (const auto& u : adj[a]) {
				int b = u.first;
				int w = u.second;
				if (dist[a] + w < dist[b]) {
					dist[b] = dist[a] + w;
					pq.push({-dist[b], b});
				}
			}
		}
	}
}
endsnippet

snippet dijkstra_restore "single-source shortest paths with path restoration" b
const int64_t n = 1e5+5;
std::vector<std::int64_t> path(n);
void dijkstra (int s) {
	for (int i = 1; i <= n; ++i) dist[i] = inf;
	dist[s] = 0;
	pq.push({0, s});
	while (!pq.empty()) {
		int a = pq.top().second; pq.pop();
		if (!vis[a]) {
			vis[a] = true;
			for (const auto& u : adj[a]) {
				int b = u.first;
				int w = u.second;
				if (dist[a] + w < dist[b]) {
					dist[b] = dist[a] + w;
					path[b] = a;
					pq.push({-dist[b], b});
				}
			}
		}
	}
}

void restore_path (int start, int end) {
	vector<int> restore;
	for (int v = end; v != start; v = path[v])
		restore.push_back(v);
}
endsnippet
